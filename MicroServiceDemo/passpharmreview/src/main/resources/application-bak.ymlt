#spring:
#  redis:
#    cluster:
#      nodes: 127.0.0.1:6379
#    lettuce:
#      pool:
#        max-active: 8 # 连接池最大连接数（使用负值表示没有限制）
#        max-wait: -1ms # 连接池最大阻塞等待时间（使用负值表示没有限制）
#        max-idle: 8 # 连接池中的最大空闲连接
#        min-idle: 0 # 连接池中的最小空闲连接
#      timeout: 3000ms # 连接超时时间（毫秒）
#    password:



spring:
  redis:
    host: 127.0.0.1 # Redis 服务器主机地址
    port: 6379 # Redis 服务器端口号
    lettuce:
      pool:
        max-active: 8 # 连接池最大连接数（使用负值表示没有限制）
        max-wait: -1ms # 连接池最大阻塞等待时间（使用负值表示没有限制）
        max-idle: 8 # 连接池中的最大空闲连接
        min-idle: 0 # 连接池中的最小空闲连接
      timeout: 3000ms # 连接超时时间（毫秒）
#  datasource:
#    type: com.alibaba.druid.pool.DruidDataSource
#    url: jdbc:mysql://localhost:3306/passprdb?serverTimezone=UTC
#    username: root
#    password: 123456
#    initial-size: 1
#    min-idle: 1
#    max-active: 20
#    test-on-borrow: true
#    driver-class-name: com.mysql.cj.jdbc.Driver


  #分库分表配置
  shardingsphere:
    datasource:
      names: master1,slave1,master2,slave2
      # 主库配置（写操作）
      master1:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/passprdb?serverTimezone=UTC
        username: root
        password: 123456
      master2:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3308/passprdb?serverTimezone=UTC
        username: root
        password: 123456
      # 从库配置（读操作）
      slave1:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3307/passprdb?serverTimezone=UTC
        username: root
        password: 123456
      slave2:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3309/passprdb?serverTimezone=UTC
        username: root
        password: 123456

    rules:
      sharding:
        # 分库策略：按 taskid 分到 master1 或 master2
        default-database-strategy:
          standard:
            sharding-column: taskid
            sharding-algorithm-name: db-inline
        tables:
          clinic_task_info:
            actual-data-nodes: master$->{1..2}.clinic_task_info$->{1..4}  # 动态匹配所有库表
            # 分表策略：按 taskid 分到 4 张表
            table-strategy:
              standard:
                sharding-column: taskid
                sharding-algorithm-name: table-inline
          pr_taskinfo_question:
            actual-data-nodes: master$->{1..2}.clinic_task_info_question$->{1..4}
            table-strategy:
              standard:
                sharding-column: taskid
                sharding-algorithm-name: table-inline
        # 分片算法定义
        sharding-algorithms:
          db-inline: # 分库算法
            type: INLINE
            props:
              algorithm-expression: master$->{taskid % 2 + 1}  # 取模分到 master1 或 master2
          table-inline: # 分表算法
            type: INLINE
            props:
              algorithm-expression: clinic_task_info$->{taskid % 4 + 1}  # 分到 1~4 表

      # 读写分离规则（每个主库对应一个从库组）
      readwrite-splitting:
        data-sources:
          master1: # 原有读写组
            static-strategy:
              write-data-source-name: master1
              read-data-source-names: slave1
            load-balancer-name: random  # 使用随机负载均衡
          master2: # 新增读写组
            static-strategy:
              write-data-source-name: master2  # 指向新主库
              read-data-source-names: slave2
            load-balancer-name: round_robin  # 使用轮询负载均衡
        load-balancers:
          random: # 原有负载均衡器
            type: RANDOM
          round_robin: # 新增负载均衡器
            type: ROUND_ROBIN

    props:
      sql-show: true  # 打印 SQL 路由日志